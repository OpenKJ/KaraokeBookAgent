name: MacOS Build

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2

    - name: Get version
      run: |
        SAVER=`grep VERSION_STRING version.h | cut -d'"' -f2`
        echo "Version: $SAVER"

    - name: Installing gcloud console tools
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
      #  project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCLOUD_KEY }}
        export_default_credentials: true

    - name: Decode app signing cert
      id: write_file_appcert
      uses: timheuer/base64-to-file@v1.0.3
      with:
        fileName: 'app.p12'
        encodedString: ${{ secrets.MAC_DEVID_APP_CERT_BASE64 }}

    - name: Decode installer signing cert
      id: write_file_installercert
      uses: timheuer/base64-to-file@v1.0.3
      with:
        fileName: 'installer.p12'
        encodedString: ${{ secrets.MAC_INSTALLER_CERT_BASE64 }}

    - name: Decode API key
      id: write_file_apikey
      uses: timheuer/base64-to-file@v1.0.3
      with:
        fileName: 'AuthKey_NX427TPKN7.p8'
        encodedString: ${{ secrets.APPLE_API_KEY_BASE64 }}

    - name: Setting up signing environment
      run: |
        security create-keychain -p '${{ secrets.MAC_P12_PASS }}' build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p '${{ secrets.MAC_P12_PASS }}' build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        security import ${{ steps.write_file_appcert.outputs.filePath }} -k build.keychain -P '${{ secrets.MAC_P12_PASS }}' -A
        security import ${{ steps.write_file_installercert.outputs.filePath }} -k build.keychain -P '${{ secrets.MAC_P12_PASS }}' -A
        security set-key-partition-list -S apple-tool:,apple: -s -k '${{ secrets.MAC_P12_PASS }}' build.keychain
        mkdir ~/private_keys
        echo "${{ secrets.APPLE_API_KEY_PLAINTEXT }}" > ~/private_keys/AuthKey_NX427TPKN7.p8
        #cp ${{ steps.write_file_apikey.outputs.filePath }} ~/private_keys/

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
       path: ../Qt
       key: ${{ runner.os }}-QtCache

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
       cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Run qmake
      run: qmake

    - name: Run make
      run: make
    
    - name: Rename app
      run: mv SongbookAgent.app "Songbook Agent.app"
    
    - name: Run macdeployqt
      run: macdeployqt "Songbook Agent.app" -appstore-compliant

    - name: Sign app bundle
      run: |
        codesign -s "Developer ID Application: Isaac Lightburn (47W8CPBS5A)" --identifier "com.okjsongbook.agent" -vvvv --deep --options=runtime "Songbook Agent.app"

    - name: Create installer
      run: |
        mkdir fakeroot
        mkdir fakeroot/Applications
        mv "Songbook Agent.app" fakeroot/Applications
        pkgbuild --root "fakeroot" --component-plist components.plist --identifier "com.okjsongbook.agent" --sign "Developer ID Installer: Isaac Lightburn (47W8CPBS5A)" OpenKJ-Songbook-Agent-`grep VERSION_STRING version.h | cut -d'"' -f2`-unstable-osx-installer.pkg
        

    - name: Notarize
      run: |
        SBVER=`grep VERSION_STRING version.h | cut -d'"' -f2`
        echo "SBA Version: $SBVER"
        FN="OpenKJ-Songbook-Agent-${SBVER}-unstable-osx-installer.pkg"
        echo "Package filename: $FN"
        UUID=`xcrun altool --notarize-app --primary-bundle-id "com.okjsongbook.agent" --file $FN --apiKey ${{ secrets.APPLE_API_KEY }}  --apiIssuer "${{ secrets.APPLE_API_ISSUER }}" | grep RequestUUID | cut -d' ' -f3`
        echo "Notarization UUID: $UUID"
        DONE=0
        while [ $DONE -lt 1 ]
        do
        sleep 10
        xcrun altool --notarization-info $UUID --apiKey ${{ secrets.APPLE_API_KEY }} --apiIssuer "${{ secrets.APPLE_API_ISSUER }}" &>notout.txt 
        cat notout.txt
        STATUS=`grep "Status:" notout.txt | cut -d':' -f2`
        if [ $? -ne 0 ];then
        STATUS=" unknown"
        echo "Error response from altool"
        continue
        fi
        
        echo "Current Stauts: $STATUS"
        
        if [ $STATUS = " in progress" ];then
        DONE=0
        continue
        fi
        
        if [ $STATUS = ' invalid' ];then
        DONE=2
        continue
        fi
        
        if [ $STATUS = ' success' ];then
        DONE=1
        fi
        
        done
        
        if [ $DONE -eq 1 ];then
        echo "Notarization successful, stapling installer"
        xcrun stapler staple $FN
        else
        echo "Error notarizing!"
        return -1
        fi

    - name: Upload installer to Google Cloud Storage
      run: |
        gsutil cp OpenKJ-Songbook-Agent-`grep VERSION_STRING version.h | cut -d'"' -f2`-unstable-osx-installer.pkg  gs://openkj-songbook-agent/macos/unstable/


